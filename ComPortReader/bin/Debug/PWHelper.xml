<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PWHelper</name>
    </assembly>
    <members>
        <member name="T:System.PW.Encryption.EasyEncryption">
            <summary>
            Class to encrypt your files.
            </summary>
        </member>
        <member name="P:System.PW.Encryption.EasyEncryption.Async">
            <summary>
            Everything but ASynchronously
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.PW.Encryption.EasyEncryption.EncryptFile(System.String,System.String)" -->
        <member name="M:System.PW.Encryption.EasyEncryption.EncryptString(System.String,System.String)">
            <summary>
            Encrypts a string randomly. Returns an ecrypted string. (Can only be decrypted using the DecryptAsync method) 
            </summary>
            <param name="data">input string</param>
            <param name="Information">This message will be displayed inside the output file before anything else</param>
            <returns></returns>
        </member>
        <member name="M:System.PW.Encryption.EasyEncryption.DecryptFile(System.String)">
            <summary>
            Decrypts the given file from EncryptAsync only. Returns the decrypted string
            </summary>
            <param name="filepath">Complete path to file.</param>
            <returns></returns>
        </member>
        <member name="M:System.PW.Encryption.EasyEncryption.DecryptString(System.String)">
            <summary>
            Decrypts the given string from EncryptAsync only. Returns the decrypted string
            </summary>
            <param name="data">Input string</param>
            <returns></returns>
        </member>
        <member name="T:System.PW.Encryption.ASynchronous">
            <summary>
            Everything but asynchronously
            </summary>
        </member>
        <member name="M:System.PW.Encryption.ASynchronous.EncryptFileAsync(System.String,System.String)">
            <summary>
            Encrypts a file randomly. Returns the encrypted string (Can only be decrypted using the DecryptAsync method) 
            </summary>
            <param name="filepath">Complete path to file.</param>
            <param name="Information">This message will be displayed inside the output file before anything else</param>
            <returns></returns>
        </member>
        <member name="M:System.PW.Encryption.ASynchronous.EncryptStringAsync(System.String,System.String)">
            <summary>
            Encrypts a string randomly. Returns an ecrypted string. (Can only be decrypted using the DecryptAsync method) 
            </summary>
            <param name="data">input string</param>
            <param name="Information">This message will be displayed inside the output file before anything else</param>
            <returns></returns>
        </member>
        <member name="M:System.PW.Encryption.ASynchronous.DecryptFileAsync(System.String)">
            <summary>
            Decrypts the given file from EncryptAsync only. Returns the decrypted string
            </summary>
            <param name="filepath">Complete path to file.</param>
            <returns></returns>
        </member>
        <member name="M:System.PW.Encryption.ASynchronous.DecryptStringAsync(System.String)">
            <summary>
            Decrypts the given string from EncryptAsync only. Returns the decrypted string
            </summary>
            <param name="data">Input string</param>
            <returns></returns>
        </member>
        <member name="T:System.PW.Encryption.OneLine">
            <summary>
            Class for encryption that only requires one line
            </summary>
        </member>
        <member name="M:System.PW.Encryption.OneLine.EncryptString(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:System.PW.Math.EasyMath">
            <summary>
            Main class for easy math.
            </summary>
        </member>
        <member name="T:System.PW.Math.EasyMath.Operators">
            <summary>
            Operators to use while using this class
            </summary>
        </member>
        <member name="M:System.PW.Math.EasyMath.RandomNumbers(System.PW.Math.EasyMath.Operators,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function returns an array of strings in following order: Operator, { All random numbers it created }, sum of random created numbers using the given operator.
            </summary>
            <param name="Operator">Operator to work with (+, -, *, /).</param>
            <param name="MinValue">The minimal value of the random number.</param>
            <param name="MaxValue">The maximal value of the random number.</param>
            <param name="NumberCount">Number of random numbers it should create and work with.</param>
        </member>
        <member name="M:System.PW.Math.EasyMath.IsPerfectSquare(System.Double)">
            <summary>
            This function returns a boolean whether the given number is a perfect square or not
            </summary>
            <param name="number">Input your number</param>
            <returns>True if it is a perfect square, false if it isn't</returns>
        </member>
        <member name="T:System.PW.Xml.EasyXML">
            <summary>
            Main class for easy xml creation and modification.
            </summary>
        </member>
        <member name="M:System.PW.Xml.EasyXML.#ctor(System.String)">
            <summary>
            Creates a new instance of EasyXML. If the given xml file location + name doesn't exist, it will get created automatically
            </summary>
            <param name="xmlPath">The path where the xml file is located/will be created and located. (Full path, so: C:\myxml.xml)</param>
        </member>
        <member name="M:System.PW.Xml.EasyXML.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new instance of EasyXML. If the given xml file location + name doesn't exist, it will get created automatically
            </summary>
            <param name="xmlPath">The path where the xml file is located/will be created and located. (Full path, so: C:\myxml.xml)</param>
            <param name="NameAndInnertext">A dictionary of type string and string. First string has to be the name, the second one innertext</param>
        </member>
        <member name="P:System.PW.Xml.EasyXML.Elements">
            <summary>
            Extention methods to do more with your elements inside your xml.
            </summary>
        </member>
        <member name="P:System.PW.Xml.EasyXML.Attributes">
            <summary>
            Extention methods to do more with your attributes inside your xml.
            </summary>
        </member>
        <member name="M:System.PW.Xml.EasyXML.TryLoad(System.String)">
            <summary>
            Tries to load the given xml file. True if it succeeded, false if it failed.
            </summary>
            <param name="Xmlpath"></param>
            <returns>True if succeeded to load the xml file, false if not</returns>
        </member>
        <member name="M:System.PW.Xml.EasyXML.TryLoad">
            <summary>
            Tries to load the given xml file. True if it succeeded, false if it failed.
            </summary>
            <returns>True if succeeded to load the xml file, false if not</returns>
        </member>
        <member name="T:System.PW.Xml.XmlElements">
            <summary>
            XmlElements class.
            </summary>
        </member>
        <member name="M:System.PW.Xml.XmlElements.#ctor(System.String)">
            <summary>
            You shouldn't be reading this, kinda unnecessary...
            </summary>
        </member>
        <member name="M:System.PW.Xml.XmlElements.Add(System.String,System.String,System.String)">
            <summary>
            Adds an Element to the xml file. Returns true if succeeded, if this returns false, make sure that you're not adding an element in the root, if so use AddElementInRoot.
            </summary>
            <param name="InXmlLocation">Location inside of the xml, example: /Root/Element (Without element name that you want to create)</param>
            <param name="Name">Name of the element you want to create.</param>
            <param name="Innertext">Innertext of the element.</param>
        </member>
        <member name="M:System.PW.Xml.XmlElements.AddToRoot(System.String,System.String)">
            <summary>
            Adds an Element to the xml file. Returns true if succeeded, false if not.
            </summary>
            <param name="Name">Name of the element you want to create.</param>
            <param name="Innertext">Innertext of the element.</param>
        </member>
        <member name="M:System.PW.Xml.XmlElements.Remove(System.String)">
            <summary>
            Removes the given element.
            </summary>
            <param name="InXmlPath">Path inside of the xml, example: /Root/MyElement</param>
        </member>
        <member name="M:System.PW.Xml.XmlElements.RemoveAll(System.String)">
            <summary>
            Removes all elements in given xml file.
            </summary>
            <param name="RootName">Name of the root, default: "Root"</param>
        </member>
        <member name="M:System.PW.Xml.XmlElements.RemoveAllExceptName(System.String,System.String)">
            <summary>
            Removes all elements except the element with the given name.
            </summary>
            <param name="RemainingElementName">Removes all the elements except this name.</param>
            <param name="RootName">Name of the root, default: "Root"</param>
        </member>
        <member name="M:System.PW.Xml.XmlElements.RemoveAllExceptIndex(System.Int32,System.String)">
            <summary>
            Removes all elements except the element with the given index.
            </summary>
            <param name="RemainingElementIndex">Removes all the elements except this index.</param>
            <param name="RootName">Name of the root, default: "Root"</param>
        </member>
        <member name="M:System.PW.Xml.XmlElements.GetNames(System.String)">
            <summary>
            Gets the child element names of "InXmlPath".
            </summary>
            <param name="InXmlPath">Path inside of the xml, example: /Root/MyElement</param>
            <returns>List of type string.</returns>
        </member>
        <member name="M:System.PW.Xml.XmlElements.GetCount(System.String)">
            <summary>
            Gets the count of the child elements of "InXmlPath".
            </summary>
            <param name="InXmlPath">Path inside of the xml, example: /Root/MyElement</param>
            <returns>The count of the child elements.</returns>
        </member>
        <member name="M:System.PW.Xml.XmlElements.GetAllWithContainingName(System.String,System.String)">
            <summary>
            Gets the Elements which have a name that contains "ContainingName".
            </summary>
            <param name="ContainingName">The name that the elements who get returned must have.</param>
            <param name="LookUnder">Where the method is going to look for the elements.</param>
            <returns>List of type XmlNode</returns>
        </member>
        <member name="M:System.PW.Xml.XmlElements.GetInnerText(System.String)">
            <summary>
            Gets the innertext of given Element.
            </summary>
            <param name="InXmlPath">Path inside of the xml, example: /Root/MyElement</param>
            <returns>Innertext of the given Element.</returns>
        </member>
        <member name="M:System.PW.Xml.XmlElements.SetInnerText(System.String,System.String)">
            <summary>
            Sets the innertext of given Element.
            </summary>
            <param name="InXmlPath">Path inside of the xml, example: /Root/MyElement</param>
            <param name="NewInnerText">New innertext you desire.</param>
        </member>
        <member name="T:System.PW.Xml.XmlAttributes">
            <summary>
            XmlAttributes class.
            </summary>
        </member>
        <member name="M:System.PW.Xml.XmlAttributes.#ctor(System.String)">
            <summary>
            You shouldn't be reading this, kinda unnecessary...
            </summary>
        </member>
        <member name="M:System.PW.Xml.XmlAttributes.GetValue(System.String,System.Int32)">
            <summary>
            Returns the attribute his value from the element it is attached to.
            </summary>
            <param name="ElementName">Element name where the attribute is attached to.</param>
            <param name="AttributeIndex">Elements could have more than one attribute, input the index of the attribute you want to return.</param>
            <returns></returns>
        </member>
        <member name="M:System.PW.Xml.XmlAttributes.GetAllValues(System.String,System.Int32)">
            <summary>
            Returns all attribute values of child elements.
            </summary>
            <param name="InXmlPath">Path inside of the xml, example: /Root/MyElement (Parent)</param>
            <param name="AttributeIndex">Elements could have more than one attribute, input the index of the attribute you want to return.</param>
            <returns></returns>
        </member>
        <member name="M:System.PW.Xml.XmlAttributes.SetValue(System.String,System.String,System.Int32)">
            <summary>
            Sets the value of an Attribute.
            </summary>
            <param name="Xmlpath">XML Path, with xml name and .xml extention.</param>
            <param name="ElementName">Element name where the attribute is attached to.</param>
            <param name="NewValue">Value of the attribute.</param>
            <param name="AttributeIndex">Which attribute?</param>
        </member>
        <member name="M:System.PW.Xml.XmlAttributes.Add(System.String,System.String,System.String)">
            <summary>
            Adds an Attribute to the given Element.
            </summary>
            <param name="InXmlPath">Path inside of the xml, example: /Root/Element (Wit element name that you want to add the attribute to)</param>
            <param name="AttributeName">Name of the attribute you want to add.</param>
            <param name="AttributeValue">Value of the attribute you're creating.</param>
        </member>
    </members>
</doc>
